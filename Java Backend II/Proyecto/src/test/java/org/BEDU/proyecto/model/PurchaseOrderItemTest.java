package org.BEDU.proyecto.model;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class PurchaseOrderItemTest {
    /*
    * Test para comprobar que el id de un item de orden de compra sea generado automáticamente
    */
    @Test
    public void testIdIsAutoGenerated() {
        PurchaseOrderItem item = new PurchaseOrderItem();
        assertNull(item.getId());
    }

    /*
    * Test para comprobar que el producto de un item de orden de compra no puede ser nulo
    */
    @Test
    public void testProductCannotBeNull() {
        PurchaseOrderItem item = new PurchaseOrderItem();
        assertThrows(IllegalArgumentException.class, () -> item.setProduct(null));
    }

    /*
    * Test para comprobar que la cantidad de un item de orden de compra no puede ser nula
    */
    @Test
    public void testQuantityCannotBeNull() {
        PurchaseOrderItem item = new PurchaseOrderItem();
        assertThrows(IllegalArgumentException.class, () -> item.setQuantity(null));
    }

    /*
    * Test para comprobar que la cantidad de un item de orden de compra no puede ser negativa
    */
    @Test
    public void testQuantityCannotBeNegative() {
        PurchaseOrderItem item = new PurchaseOrderItem();
        assertThrows(IllegalArgumentException.class, () -> item.setQuantity(-1));
    }

    /*Test para comprobar que la orden de compra asociada a un item de orden de compra no puede ser nula
    */
    @Test
    public void testPurchaseOrderCannotBeNull() {
        PurchaseOrderItem item = new PurchaseOrderItem();
        assertThrows(IllegalArgumentException.class, () -> item.setPurchaseOrder(null));
    }

    /*
    * Test para comprobar que se puede cambiar la orden de compra asociada a un item de orden de compra
    */

    @Test
    public void testPurchaseOrderCanBeChanged() {
        PurchaseOrderItem item = new PurchaseOrderItem();
        PurchaseOrder order = new PurchaseOrder();
        item.setPurchaseOrder(order);
        assertEquals(order, item.getPurchaseOrder());
    }

    /*
    * Test para comprobar que el id de cada item de la orden de compra sea único
    */

    @Test
    public void testIdIsUnique() {
        PurchaseOrderItem item1 = new PurchaseOrderItem();
        PurchaseOrderItem item2 = new PurchaseOrderItem();
        assertNotEquals(item1.getId(), item2.getId());
    }

}